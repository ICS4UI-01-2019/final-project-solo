/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.stockmarketinvestinggame;

import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mankaran
 */
public class StockScreen extends javax.swing.JFrame {

    // instance variables
    private InvestGame investGame;
    private User currentUser;
    private DefaultTableModel model;
    private DefaultTableModel positionModel;
    private Login loginScreen;

    // instance variables
    private String tickerSymbol;
    private String ask;
    private String bid;
    private String dayHigh;
    private String dayLow;
    private long volume;
    private DecimalFormat df = new DecimalFormat("#.##");

    // constructor 
    public StockScreen() throws IOException {
        initComponents();
        this.setResizable(false);

    }

    // constructor that takes in a login screen, invest gane, and user
    public StockScreen(Login screen, InvestGame investGame, User currentUser) throws IOException {
        initComponents();
        // set instance variables equal to values passed in
        this.investGame = investGame;
        this.loginScreen = screen;
        this.currentUser = currentUser;
        this.model = (DefaultTableModel) this.table.getModel();
        this.positionModel = (DefaultTableModel) this.positions.getModel();

        // for the user that's logged in, iterate through their stocks arraylist and display all of their stocks
        for (int i = 0; i < currentUser.stocks.size(); i++) {
            this.positionModel.addRow(new Object[]{currentUser.stocks.get(i).getDate(), currentUser.stocks.get(i).getTime(), currentUser.stocks.get(i).getTicker(), "$" + currentUser.stocks.get(i).getPurchaseTotal(), currentUser.stocks.get(i).getQuantity(), "$" + currentUser.stocks.get(i).getBuyPrice()});
        }

        this.setResizable(false);
        this.setUserBalance();

        // mouse listener
        this.table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                // check to see if a row in the table has been clicked twice
                if (me.getClickCount() == 2) {
                    int row = table.getSelectedRow();
                    String ticker = (String) model.getValueAt(row, 0);
                    HistoricalStockInfo hsf;
                    try {
                        // open up the historical stock info screen
                        hsf = new HistoricalStockInfo(investGame, ticker);
                        hsf.setVisible(true);
                    } catch (IOException ex) {
                        Logger.getLogger(StockScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        });

    }

    // method to change text of user's balance
    public void setUserBalance() {
        this.currentBalanceSearch.setText("CURRENT BALANCE: $" + String.valueOf(this.currentUser.getBalance()));
        this.currentBalancePositions.setText("CURRENT BALANCE: $" + String.valueOf(this.currentUser.getBalance()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        positions = new javax.swing.JTable();
        sellButton = new javax.swing.JButton();
        currentBalancePositions = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buyButton = new javax.swing.JButton();
        numberOfShares = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        currentBalanceSearch = new javax.swing.JLabel();
        searchTicker = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 0));

        positions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time", "Ticker Symbol", "Purchase", "Quantity", "Buy Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        positions.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(positions);
        if (positions.getColumnModel().getColumnCount() > 0) {
            positions.getColumnModel().getColumn(0).setResizable(false);
            positions.getColumnModel().getColumn(1).setResizable(false);
            positions.getColumnModel().getColumn(2).setResizable(false);
            positions.getColumnModel().getColumn(3).setResizable(false);
            positions.getColumnModel().getColumn(4).setResizable(false);
            positions.getColumnModel().getColumn(5).setResizable(false);
        }

        sellButton.setText("Sell");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        currentBalancePositions.setText("CURRENT BALANCE: ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(currentBalancePositions, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(currentBalancePositions, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(sellButton)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Current Positions", jPanel5);

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ticker Symbol", "Bid", "Ask", "High", "Low", "Volume"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(5).setResizable(false);
        }

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        numberOfShares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfSharesActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please enter the amount of shares you'd like to purchase");

        currentBalanceSearch.setText("CURRENT BALANCE:");

        searchTicker.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchTicker.setText("Search for a ticker symbol below and double click on a row to retrieve historical information.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(currentBalanceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(164, 164, 164))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numberOfShares, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(264, 264, 264)
                                .addComponent(searchButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 39, Short.MAX_VALUE)
                .addComponent(searchTicker, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentBalanceSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchTicker)
                .addGap(7, 7, 7)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(numberOfShares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(buyButton))
        );

        jTabbedPane1.addTab("Search", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // get text from search field
        this.tickerSymbol = this.searchField.getText();

        try {
            // get values of stock entered
            this.bid = this.investGame.getStockBid(this.searchField.getText());
            this.ask = this.investGame.getStockAsk(this.searchField.getText());
            this.dayHigh = this.investGame.getStockDayHigh(this.searchField.getText());
            this.dayLow = this.investGame.getStockDayLow(this.searchField.getText());
            this.volume = this.investGame.getStockVolume(this.searchField.getText());
        // if a user has entered a ticker symbol that does not exist, ask them to enter one that does
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid ticker symbol.");
        }

        // if the ticker symbol does not exist, ask user to enter one that does exist
        if (ask == null) {
            JOptionPane.showMessageDialog(null, "Please enter a valid ticker symbol.");
        // otherwise, add a row to the table containing the stock's information
        } else {
            this.model.addRow(new Object[]{this.tickerSymbol.toUpperCase(), "$" + this.bid, "$" + this.ask, "$" + this.dayHigh, "$" + this.dayLow, this.volume});
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed

        try {
            // get selected row
            int row = this.table.getSelectedRow();
            // get quantity of shares user would like to buy
            int quantity = Integer.parseInt(this.numberOfShares.getText());

            // if no row is selected or the quantity entered is 0, then ask user to select a row and enter number of shares they'd like to purchase
            if (row == -1 || quantity == 0) {
                JOptionPane.showMessageDialog(null, "Please select the stock and enter the number of shares you would like to purchase.");
            } else {
                // get ticker symbol of selected row
                String value = this.table.getModel().getValueAt(row, 0).toString();

                // ask user for their username 
                String username = JOptionPane.showInputDialog("Please enter your username to buy shares of " + value + ".");

                // check if the user has entered a username and if the length is greater than 0
                if ((username != null) && (username.length() > 0)) {

                    // ask user for password 
                    String password = JOptionPane.showInputDialog("Please enter your password to buy shares of " + value + ".");

                    // check if the user has entered a password and if the length is greater than 0
                    if ((password != null) && (password.length() > 0)) {

                        // check to see if user exists
                        User comparingUser = this.investGame.checkUser(username, password);

                        // if the user does not exist, tell user
                        if (comparingUser == null) {
                            JOptionPane.showMessageDialog(null, "Incorrect User Information!");
                            // otherwise, see if the user that's logged in equals the user that is being compared
                        } else if (comparingUser.getUsername().equals(this.currentUser.getUsername()) && comparingUser.getPassword(password).equals(this.currentUser.getPassword(password))) {
                            // ask user to confirm their order
                            int option = JOptionPane.showConfirmDialog(null, "Would you like to put an order in for " + quantity + " shares of " + value + " coming to a total value of $" + this.df.format(Double.parseDouble(this.investGame.getStockAsk(value)) * quantity) + "?");
                            // if YES is selected, then buy stocks and tell user they have successfully purchased shares
                            if (option == JOptionPane.YES_OPTION) {
                                // check to see if buyStock is true
                                if (this.investGame.buyStock(this.currentUser, value, quantity)) {
                                    JOptionPane.showMessageDialog(null, "You have successfully purchased " + quantity + " shares of " + value + "!");
                                    // change balance text
                                    this.setUserBalance();
                                    // add a row containing the user's newest stock
                                    ArrayList<Stocks> s = this.currentUser.stocks;
                                    this.positionModel.addRow(new Object[]{s.get(s.size() - 1).getDate(), s.get(s.size() - 1).getTime(), s.get(s.size() - 1).getTicker(), "$" + s.get(s.size() - 1).getPurchaseTotal(), s.get(s.size() - 1).getQuantity(), "$" + s.get(s.size() - 1).getBuyPrice()});
                                // otherwise, user does not have sufficient funds and cannot buy stocks
                                } else {
                                    JOptionPane.showMessageDialog(null, "Not Sufficient Funds.");
                                }
                            // the user has clicked cancel or exited or no
                            } else {
                                System.out.println("User exited.");
                            }
                        // tell user wrong user information is entered
                        } else {
                            JOptionPane.showMessageDialog(null, "Incorrect User Information!");
                        }
                    // if wrong password is entered, tell user
                    } else {
                        JOptionPane.showMessageDialog(null, "Incorrect User Information!");
                    }
                }
            }
        // catch an exception if either a row hasn't been selected or an integer value isn't entered 
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please select a stock and enter an integer value.");
        // catch an input/output exception
        } catch (IOException ex) {
            Logger.getLogger(StockScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_buyButtonActionPerformed

    private void numberOfSharesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfSharesActionPerformed

    }//GEN-LAST:event_numberOfSharesActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed

        try {
            // get selected row
            int row = this.positions.getSelectedRow();

            // if no row is selected, tell user
            if (row == -1) {
                if (this.positions.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "You have no positions.");
                } else {
                    JOptionPane.showMessageDialog(null, "Please select a row.");
                }
            } else {
                // get ticker symbol of selected row
                String value = this.positions.getModel().getValueAt(row, 2).toString();
                // tell user bid price of stock they wish to sell
                JOptionPane.showMessageDialog(null, "The bid price of this stock is $" + this.investGame.getStockBid(value) + ".");
                System.out.println(this.investGame.getStockBid(value));
                // ask user how many of their shares they would like to sell
                int quantity = Integer.parseInt(JOptionPane.showInputDialog("How many shares of " + value + " would you like to sell? (Note that entering an integer higher than the amount of stocks that you own will sell all stocks of that position)"));
                // get username of user
                String username = JOptionPane.showInputDialog("Please enter your username to sell shares of " + value);

                // check to see if user has entered a username
                if ((username != null) && (username.length() > 0)) {
                    // get password of user
                    String password = JOptionPane.showInputDialog("Please enter your password to sell shares of " + value);
                    
                    // check to see if user has entered a password
                    if ((password != null) && (password.length() > 0)) {
                        // see if user exists
                        User comparingUser = this.investGame.checkUser(username, password);

                        // if no user exists, tell user they've entered incorrect information
                        if (comparingUser == null) {
                            JOptionPane.showMessageDialog(null, "Incorrect User Information!");
                        // if the logged in user equals the information they've entered, then continue on
                        } else if (comparingUser.getUsername().equals(this.currentUser.getUsername()) && comparingUser.getPassword(password).equals(this.currentUser.getPassword(password))) {
                            
                            int option;
                            
                            // ask user to confirm their sell order
                            // check if the quantity of shares the user wants to sell is less than what they own
                            if (Integer.parseInt(this.positions.getModel().getValueAt(row, 4).toString()) > quantity) {
                                // ask usser to sell x amount of shares
                                option = JOptionPane.showConfirmDialog(null, "Please confirm that you would like to sell " + quantity + " shares of " + value + " coming to a total value of $" + this.df.format(Double.parseDouble(this.investGame.getStockBid(value)) * quantity) + "?");
                            // otherwise, ask user if they want to sell all their shares
                            } else {
                                option = JOptionPane.showConfirmDialog(null, "Please confirm that you would like to sell all shares of " + value + " coming to a total value of $" + this.df.format(Double.parseDouble(this.investGame.getStockBid(value)) * Integer.parseInt(this.positions.getModel().getValueAt(row, 4).toString())) + "?");
                            }
                            

                            // check to see if user wishes to sell
                            if (option == JOptionPane.YES_OPTION) {
                                // sell the stock and store the quantity of stocks left in the position
                                int positionQuantity = this.investGame.sellStock(currentUser, value, quantity, this.positions.getModel().getValueAt(row, 1).toString());

                                // if no stocks are left in the position, remove that row
                                if (positionQuantity == 0) {
                                    this.setUserBalance();
                                    this.positionModel.removeRow(row);
                                    JOptionPane.showMessageDialog(null, "You have successfully sold all shares of " + value + "!");
                                // otherwise, change the row values
                                } else {
                                    this.setUserBalance();
                                    this.positionModel.setValueAt(positionQuantity, row, 4);
                                    this.positionModel.setValueAt("$" + this.investGame.purchase, row, 3);
                                    JOptionPane.showMessageDialog(null, "You have successfully sold " + quantity + " shares of " + value + "!");
                                }
                                
                                // calculate the difference of the stocks that the user initially bought and price of the stocks they just sold
                                double difference = Double.parseDouble(this.df.format(this.investGame.newPurchaseTotal - this.investGame.oldPurchaseTotal));
                                
                                // check if the user had made or lost money, or breaks even
                                if (difference > 0) {
                                    JOptionPane.showMessageDialog(null, "You have made $" + difference + ".");
                                } else if (difference < 0) {
                                    JOptionPane.showMessageDialog(null, "You have lost $" + difference + ".");
                                } else {
                                    JOptionPane.showMessageDialog(null, "You have broke even.");
                                }        
                                
                            // user has exited 
                            } else {
                                System.out.println("User exited.");
                            }
                        // user has entered incorrect information
                        } else {
                            JOptionPane.showMessageDialog(null, "Incorrect User Information!");
                        }
                    // user has entered incorrect information
                    } else {
                        JOptionPane.showMessageDialog(null, "Incorrect User Information!");
                    }

                }

            }
        // catch any exception errors
        } catch (HeadlessException he) {
            Logger.getLogger(StockScreen.class.getName()).log(Level.SEVERE, null, he);
        } catch (NumberFormatException | IOException nfe) {
            JOptionPane.showMessageDialog(null, "Please enter an integer value.");
        }

    }//GEN-LAST:event_sellButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new StockScreen().setVisible(true);

                } catch (IOException ex) {
                    Logger.getLogger(StockScreen.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel currentBalancePositions;
    private javax.swing.JLabel currentBalanceSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField numberOfShares;
    private javax.swing.JTable positions;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchTicker;
    private javax.swing.JButton sellButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
